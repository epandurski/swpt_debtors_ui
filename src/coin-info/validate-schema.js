"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"definitions":{"ResourceReference":{"type":"object","properties":{"uri":{"type":"string","maxLength":1000,"description":"The IRI (Internationalized Resource Identifier) of the referenced resource. Can be a relative IRI."}},"required":["uri"]},"DebtorIdentity":{"type":"object","properties":{"type":{"const":"DebtorIdentity"},"uri":{"type":"string","maxLength":100,"description":"The information contained in this field must be enough to uniquely and reliably identify the debtor. Note that a network request should not be needed to identify the debtor. For example, if the debtor happens to be a bank, the URI would reveal the type of the debtor (a bank), and the ID of the bank. Note that some debtors may be used only to represent a physical value measurement unit (like ounces of gold). Those dummy debtors do not represent a person or an organization, do not owe anything to anyone, and are used solely as identifiers of value measurement units."}},"required":["type","uri"]},"CoinPeg":{"type":"object","properties":{"type":{"const":"CoinPeg"},"exchangeRate":{"type":"number","minimum":0,"description":"The exchange rate between the pegged currency and the peg currency. For example, `2.0` would mean that pegged currency's tokens are twice as valuable as peg currency's tokens."},"debtorIdentity":{"$ref":"#/definitions/DebtorIdentity","description":"Uniquely identifies the peg currency."},"latestCoinInfo":{"$ref":"#/definitions/ResourceReference","description":"A link to the newest revision of the peg currency's `CoinInfo` document."}},"required":["type","exchangeRate","debtorIdentity","latestCoinInfo"]}},"type":"object","properties":{"type":{"type":"string","pattern":"^CoinInfo(-v[1-9][0-9]{0,5})?$"},"uri":{"type":"string","minLength":1,"maxLength":200,"description":"The IRI (Internationalized Resource Identifier) of this object. Must be an absolute IRI."},"revision":{"type":"integer","minimum":0,"maximum":4294967295,"description":"The revision number. Later revisions must have bigger revision numbers."},"willNotChangeUntil":{"type":"string","maxLength":100,"description":"Optional promise that, until the specified (in ISO 8601 format) moment, there will be no new revisions of this document."},"latestCoinInfo":{"$ref":"#/definitions/ResourceReference","description":"A link to the newest revision of this document."},"summary":{"type":"string","maxLength":1000,"description":"A short description of the currency."},"debtorIdentity":{"$ref":"#/definitions/DebtorIdentity","description":"Uniquely identifies the debtor (and the currency)."},"debtorName":{"type":"string","minLength":1,"maxLength":40,"description":"The name of the debtor. Should be unambiguous and easy to remember."},"debtorHomepage":{"$ref":"#/definitions/ResourceReference","description":"Optional link to the debtor's homepage."},"amountDevisor":{"type":"number","minimum":0,"description":"Before displaying the amount, it should be divided by this number. This value should be used for display purposes only. Notably, the value of this field must be ignored when the exchange rate between pegged currencies is calculated."},"decimalPlaces":{"type":"integer","minimum":-20,"maximum":20,"description":"The number of digits to show after the decimal point, when displaying the amount. A negative number signifies the number of insignificant digits at the end of the integer number."},"unit":{"type":"string","minLength":1,"maxLength":40,"description":"The value measurement unit. It should be shown right after the displayed amount, \"500.00 USD\" for example."},"peg":{"$ref":"#/definitions/CoinPeg","description":"Optional currency peg. A currency peg is a currency management strategy in which the debtor sets a specific fixed exchange rate between the tokens of his currency (the pegged currency) and the tokens of some other currency (the peg currency)."}},"required":["type","uri","revision","latestCoinInfo","debtorIdentity","debtorName","amountDevisor","decimalPlaces","unit"],"additionalProperties":true};const schema23 = {"type":"object","properties":{"uri":{"type":"string","maxLength":1000,"description":"The IRI (Internationalized Resource Identifier) of the referenced resource. Can be a relative IRI."}},"required":["uri"]};const schema24 = {"type":"object","properties":{"type":{"const":"DebtorIdentity"},"uri":{"type":"string","maxLength":100,"description":"The information contained in this field must be enough to uniquely and reliably identify the debtor. Note that a network request should not be needed to identify the debtor. For example, if the debtor happens to be a bank, the URI would reveal the type of the debtor (a bank), and the ID of the bank. Note that some debtors may be used only to represent a physical value measurement unit (like ounces of gold). Those dummy debtors do not represent a person or an organization, do not owe anything to anyone, and are used solely as identifiers of value measurement units."}},"required":["type","uri"]};const func8 = Object.prototype.hasOwnProperty;const func9 = require("./ucs2length.js").default;const pattern0 = new RegExp("^CoinInfo(-v[1-9][0-9]{0,5})?$", "u");const schema26 = {"type":"object","properties":{"type":{"const":"CoinPeg"},"exchangeRate":{"type":"number","minimum":0,"description":"The exchange rate between the pegged currency and the peg currency. For example, `2.0` would mean that pegged currency's tokens are twice as valuable as peg currency's tokens."},"debtorIdentity":{"$ref":"#/definitions/DebtorIdentity","description":"Uniquely identifies the peg currency."},"latestCoinInfo":{"$ref":"#/definitions/ResourceReference","description":"A link to the newest revision of the peg currency's `CoinInfo` document."}},"required":["type","exchangeRate","debtorIdentity","latestCoinInfo"]};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.type === undefined) && (missing0 = "type")) || ((data.exchangeRate === undefined) && (missing0 = "exchangeRate"))) || ((data.debtorIdentity === undefined) && (missing0 = "debtorIdentity"))) || ((data.latestCoinInfo === undefined) && (missing0 = "latestCoinInfo"))){validate21.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "type") || (key0 === "exchangeRate")) || (key0 === "debtorIdentity")) || (key0 === "latestCoinInfo"))){delete data[key0];}}if(_errs1 === errors){if(data.type !== undefined){const _errs2 = errors;if("CoinPeg" !== data.type){validate21.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "CoinPeg"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.exchangeRate !== undefined){let data1 = data.exchangeRate;const _errs3 = errors;if(errors === _errs3){if((typeof data1 == "number") && (isFinite(data1))){if(data1 < 0 || isNaN(data1)){validate21.errors = [{instancePath:instancePath+"/exchangeRate",schemaPath:"#/properties/exchangeRate/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}else {validate21.errors = [{instancePath:instancePath+"/exchangeRate",schemaPath:"#/properties/exchangeRate/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.debtorIdentity !== undefined){let data2 = data.debtorIdentity;const _errs5 = errors;const _errs6 = errors;if(errors === _errs6){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if(((data2.type === undefined) && (missing1 = "type")) || ((data2.uri === undefined) && (missing1 = "uri"))){validate21.errors = [{instancePath:instancePath+"/debtorIdentity",schemaPath:"#/definitions/DebtorIdentity/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs8 = errors;for(const key1 in data2){if(!((key1 === "type") || (key1 === "uri"))){delete data2[key1];}}if(_errs8 === errors){if(data2.type !== undefined){const _errs9 = errors;if("DebtorIdentity" !== data2.type){validate21.errors = [{instancePath:instancePath+"/debtorIdentity/type",schemaPath:"#/definitions/DebtorIdentity/properties/type/const",keyword:"const",params:{allowedValue: "DebtorIdentity"},message:"must be equal to constant"}];return false;}var valid2 = _errs9 === errors;}else {var valid2 = true;}if(valid2){if(data2.uri !== undefined){let data4 = data2.uri;const _errs10 = errors;if(errors === _errs10){if(typeof data4 === "string"){if(func9(data4) > 100){validate21.errors = [{instancePath:instancePath+"/debtorIdentity/uri",schemaPath:"#/definitions/DebtorIdentity/properties/uri/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}}else {validate21.errors = [{instancePath:instancePath+"/debtorIdentity/uri",schemaPath:"#/definitions/DebtorIdentity/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs10 === errors;}else {var valid2 = true;}}}}}else {validate21.errors = [{instancePath:instancePath+"/debtorIdentity",schemaPath:"#/definitions/DebtorIdentity/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.latestCoinInfo !== undefined){let data5 = data.latestCoinInfo;const _errs12 = errors;const _errs13 = errors;if(errors === _errs13){if(data5 && typeof data5 == "object" && !Array.isArray(data5)){let missing2;if((data5.uri === undefined) && (missing2 = "uri")){validate21.errors = [{instancePath:instancePath+"/latestCoinInfo",schemaPath:"#/definitions/ResourceReference/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {const _errs15 = errors;for(const key2 in data5){if(!(key2 === "uri")){delete data5[key2];}}if(_errs15 === errors){if(data5.uri !== undefined){let data6 = data5.uri;const _errs16 = errors;if(errors === _errs16){if(typeof data6 === "string"){if(func9(data6) > 1000){validate21.errors = [{instancePath:instancePath+"/latestCoinInfo/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}}else {validate21.errors = [{instancePath:instancePath+"/latestCoinInfo/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}}}else {validate21.errors = [{instancePath:instancePath+"/latestCoinInfo",schemaPath:"#/definitions/ResourceReference/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}else {validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate21.errors = vErrors;return errors === 0;}function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((((((data.type === undefined) && (missing0 = "type")) || ((data.uri === undefined) && (missing0 = "uri"))) || ((data.revision === undefined) && (missing0 = "revision"))) || ((data.latestCoinInfo === undefined) && (missing0 = "latestCoinInfo"))) || ((data.debtorIdentity === undefined) && (missing0 = "debtorIdentity"))) || ((data.debtorName === undefined) && (missing0 = "debtorName"))) || ((data.amountDevisor === undefined) && (missing0 = "amountDevisor"))) || ((data.decimalPlaces === undefined) && (missing0 = "decimalPlaces"))) || ((data.unit === undefined) && (missing0 = "unit"))){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(func8.call(schema22.properties, key0))){delete data[key0];}}if(_errs1 === errors){if(data.type !== undefined){let data0 = data.type;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate20.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/pattern",keyword:"pattern",params:{pattern: "^CoinInfo(-v[1-9][0-9]{0,5})?$"},message:"must match pattern \""+"^CoinInfo(-v[1-9][0-9]{0,5})?$"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.uri !== undefined){let data1 = data.uri;const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func9(data1) > 200){validate20.errors = [{instancePath:instancePath+"/uri",schemaPath:"#/properties/uri/maxLength",keyword:"maxLength",params:{limit: 200},message:"must NOT have more than 200 characters"}];return false;}else {if(func9(data1) < 1){validate20.errors = [{instancePath:instancePath+"/uri",schemaPath:"#/properties/uri/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate20.errors = [{instancePath:instancePath+"/uri",schemaPath:"#/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.revision !== undefined){let data2 = data.revision;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate20.errors = [{instancePath:instancePath+"/revision",schemaPath:"#/properties/revision/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs6){if((typeof data2 == "number") && (isFinite(data2))){if(data2 > 4294967295 || isNaN(data2)){validate20.errors = [{instancePath:instancePath+"/revision",schemaPath:"#/properties/revision/maximum",keyword:"maximum",params:{comparison: "<=", limit: 4294967295},message:"must be <= 4294967295"}];return false;}else {if(data2 < 0 || isNaN(data2)){validate20.errors = [{instancePath:instancePath+"/revision",schemaPath:"#/properties/revision/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.willNotChangeUntil !== undefined){let data3 = data.willNotChangeUntil;const _errs8 = errors;if(errors === _errs8){if(typeof data3 === "string"){if(func9(data3) > 100){validate20.errors = [{instancePath:instancePath+"/willNotChangeUntil",schemaPath:"#/properties/willNotChangeUntil/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/willNotChangeUntil",schemaPath:"#/properties/willNotChangeUntil/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.latestCoinInfo !== undefined){let data4 = data.latestCoinInfo;const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){let missing1;if((data4.uri === undefined) && (missing1 = "uri")){validate20.errors = [{instancePath:instancePath+"/latestCoinInfo",schemaPath:"#/definitions/ResourceReference/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs13 = errors;for(const key1 in data4){if(!(key1 === "uri")){delete data4[key1];}}if(_errs13 === errors){if(data4.uri !== undefined){let data5 = data4.uri;const _errs14 = errors;if(errors === _errs14){if(typeof data5 === "string"){if(func9(data5) > 1000){validate20.errors = [{instancePath:instancePath+"/latestCoinInfo/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/latestCoinInfo/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}}}else {validate20.errors = [{instancePath:instancePath+"/latestCoinInfo",schemaPath:"#/definitions/ResourceReference/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.summary !== undefined){let data6 = data.summary;const _errs16 = errors;if(errors === _errs16){if(typeof data6 === "string"){if(func9(data6) > 1000){validate20.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/properties/summary/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/properties/summary/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.debtorIdentity !== undefined){let data7 = data.debtorIdentity;const _errs18 = errors;const _errs19 = errors;if(errors === _errs19){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){let missing2;if(((data7.type === undefined) && (missing2 = "type")) || ((data7.uri === undefined) && (missing2 = "uri"))){validate20.errors = [{instancePath:instancePath+"/debtorIdentity",schemaPath:"#/definitions/DebtorIdentity/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {const _errs21 = errors;for(const key2 in data7){if(!((key2 === "type") || (key2 === "uri"))){delete data7[key2];}}if(_errs21 === errors){if(data7.type !== undefined){const _errs22 = errors;if("DebtorIdentity" !== data7.type){validate20.errors = [{instancePath:instancePath+"/debtorIdentity/type",schemaPath:"#/definitions/DebtorIdentity/properties/type/const",keyword:"const",params:{allowedValue: "DebtorIdentity"},message:"must be equal to constant"}];return false;}var valid4 = _errs22 === errors;}else {var valid4 = true;}if(valid4){if(data7.uri !== undefined){let data9 = data7.uri;const _errs23 = errors;if(errors === _errs23){if(typeof data9 === "string"){if(func9(data9) > 100){validate20.errors = [{instancePath:instancePath+"/debtorIdentity/uri",schemaPath:"#/definitions/DebtorIdentity/properties/uri/maxLength",keyword:"maxLength",params:{limit: 100},message:"must NOT have more than 100 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/debtorIdentity/uri",schemaPath:"#/definitions/DebtorIdentity/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs23 === errors;}else {var valid4 = true;}}}}}else {validate20.errors = [{instancePath:instancePath+"/debtorIdentity",schemaPath:"#/definitions/DebtorIdentity/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.debtorName !== undefined){let data10 = data.debtorName;const _errs25 = errors;if(errors === _errs25){if(typeof data10 === "string"){if(func9(data10) > 40){validate20.errors = [{instancePath:instancePath+"/debtorName",schemaPath:"#/properties/debtorName/maxLength",keyword:"maxLength",params:{limit: 40},message:"must NOT have more than 40 characters"}];return false;}else {if(func9(data10) < 1){validate20.errors = [{instancePath:instancePath+"/debtorName",schemaPath:"#/properties/debtorName/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate20.errors = [{instancePath:instancePath+"/debtorName",schemaPath:"#/properties/debtorName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.debtorHomepage !== undefined){let data11 = data.debtorHomepage;const _errs27 = errors;const _errs28 = errors;if(errors === _errs28){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){let missing3;if((data11.uri === undefined) && (missing3 = "uri")){validate20.errors = [{instancePath:instancePath+"/debtorHomepage",schemaPath:"#/definitions/ResourceReference/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {const _errs30 = errors;for(const key3 in data11){if(!(key3 === "uri")){delete data11[key3];}}if(_errs30 === errors){if(data11.uri !== undefined){let data12 = data11.uri;const _errs31 = errors;if(errors === _errs31){if(typeof data12 === "string"){if(func9(data12) > 1000){validate20.errors = [{instancePath:instancePath+"/debtorHomepage/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/maxLength",keyword:"maxLength",params:{limit: 1000},message:"must NOT have more than 1000 characters"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/debtorHomepage/uri",schemaPath:"#/definitions/ResourceReference/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}}}else {validate20.errors = [{instancePath:instancePath+"/debtorHomepage",schemaPath:"#/definitions/ResourceReference/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs27 === errors;}else {var valid0 = true;}if(valid0){if(data.amountDevisor !== undefined){let data13 = data.amountDevisor;const _errs33 = errors;if(errors === _errs33){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){validate20.errors = [{instancePath:instancePath+"/amountDevisor",schemaPath:"#/properties/amountDevisor/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/amountDevisor",schemaPath:"#/properties/amountDevisor/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}var valid0 = _errs33 === errors;}else {var valid0 = true;}if(valid0){if(data.decimalPlaces !== undefined){let data14 = data.decimalPlaces;const _errs35 = errors;if(!(((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14))) && (isFinite(data14)))){validate20.errors = [{instancePath:instancePath+"/decimalPlaces",schemaPath:"#/properties/decimalPlaces/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs35){if((typeof data14 == "number") && (isFinite(data14))){if(data14 > 20 || isNaN(data14)){validate20.errors = [{instancePath:instancePath+"/decimalPlaces",schemaPath:"#/properties/decimalPlaces/maximum",keyword:"maximum",params:{comparison: "<=", limit: 20},message:"must be <= 20"}];return false;}else {if(data14 < -20 || isNaN(data14)){validate20.errors = [{instancePath:instancePath+"/decimalPlaces",schemaPath:"#/properties/decimalPlaces/minimum",keyword:"minimum",params:{comparison: ">=", limit: -20},message:"must be >= -20"}];return false;}}}}var valid0 = _errs35 === errors;}else {var valid0 = true;}if(valid0){if(data.unit !== undefined){let data15 = data.unit;const _errs37 = errors;if(errors === _errs37){if(typeof data15 === "string"){if(func9(data15) > 40){validate20.errors = [{instancePath:instancePath+"/unit",schemaPath:"#/properties/unit/maxLength",keyword:"maxLength",params:{limit: 40},message:"must NOT have more than 40 characters"}];return false;}else {if(func9(data15) < 1){validate20.errors = [{instancePath:instancePath+"/unit",schemaPath:"#/properties/unit/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}}else {validate20.errors = [{instancePath:instancePath+"/unit",schemaPath:"#/properties/unit/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs37 === errors;}else {var valid0 = true;}if(valid0){if(data.peg !== undefined){const _errs39 = errors;if(!(validate21(data.peg, {instancePath:instancePath+"/peg",parentData:data,parentDataProperty:"peg",rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}var valid0 = _errs39 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}